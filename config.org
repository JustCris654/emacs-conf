#+TITLE: JustCris Emacs Configuration
#+AUTHOR: Cristian Scapin (JustCris)
#+DESCRIPTION: Personal Emacs config.
#+STARTUP: showeverything
#+OPTIONS: toc:2

* TABLE OF CONTENTS :toc:
- [[#emacs-customizations][EMACS Customizations]]
  - [[#remove-tool-bar-menu-bar-and-scroll-bar][Remove tool-bar, menu-bar and scroll-bar]]
  - [[#enable-line-numbers-and-set-them-relative][Enable line numbers and set them relative]]
  - [[#qol][QoL]]
- [[#packages-important-to-load-first-important-to-load-first][PACKAGES important to load first important to load first]]
  - [[#elpaca-package-manager][Elpaca package manager]]
  - [[#instal-evil-mode][Instal evil-mode]]
  - [[#general-keybindings][General keybindings]]
- [[#fonts][FONTS]]
  - [[#setting-the-font-face][Setting the Font Face]]
  - [[#zomming-inout][Zomming in/out]]
- [[#which-key][WHICH-KEY]]
- [[#org-mode][ORG MODE]]
  - [[#enable-table-of-contents][Enable table of contents]]
  - [[#enable-org-indent-mode][Enable org-indent-mode]]
  - [[#enable-org-bullets][Enable org bullets]]
  - [[#enable-org-tempo][Enable org-tempo]]

* EMACS Customizations
** Remove tool-bar, menu-bar and scroll-bar
#+begin_src emacs-lisp
  (tool-bar-mode -1)
  (menu-bar-mode -1)
  (toggle-scroll-bar -1)
  (pixel-scroll-precision-mode 1)
#+end_src

** Enable line numbers and set them relative
#+begin_src emacs-lisp
  (display-line-numbers-mode 1)
  (global-display-line-numbers-mode 1)
  (setq display-line-numbers-type 'relative)
#+end_src

** QoL
#+begin_src emacs-lisp
  (pixel-scroll-precision-mode 1)
  (defalias 'yes-or-no-p 'y-or-n-p) ;; life is too short
  (setopt use-short-answers t)
  (setq show-trailing-whitespace t)
  (setq indent-tabs-mode nil)
  (setq create-lockfiles nil)
  ;; keep backup and save files in a dedicated directory
  (setq backup-directory-alist
          `((".*" . ,(concat user-emacs-directory "backups")))
          auto-save-file-name-transforms
          `((".*" ,(concat user-emacs-directory "backups") t)))

  (set-charset-priority 'unicode)
  (setq byte-compile-warnings '(not free-vars unresolved noruntime lexical make-local))
  (setq native-comp-async-report-warnings-errors nil)
  (setq load-prefer-newer t)
#+end_src


* PACKAGES important to load first important to load first
** Elpaca package manager
#+begin_src emacs-lisp
(defvar elpaca-installer-version 0.11)
(defvar elpaca-directory (expand-file-name "elpaca/" user-emacs-directory))
(defvar elpaca-builds-directory (expand-file-name "builds/" elpaca-directory))
(defvar elpaca-repos-directory (expand-file-name "repos/" elpaca-directory))
(defvar elpaca-order '(elpaca :repo "https://github.com/progfolio/elpaca.git"
                              :ref nil :depth 1 :inherit ignore
                              :files (:defaults "elpaca-test.el" (:exclude "extensions"))
                              :build (:not elpaca--activate-package)))
(let* ((repo  (expand-file-name "elpaca/" elpaca-repos-directory))
       (build (expand-file-name "elpaca/" elpaca-builds-directory))
       (order (cdr elpaca-order))
       (default-directory repo))
  (add-to-list 'load-path (if (file-exists-p build) build repo))
  (unless (file-exists-p repo)
    (make-directory repo t)
    (when (<= emacs-major-version 28) (require 'subr-x))
    (condition-case-unless-debug err
        (if-let* ((buffer (pop-to-buffer-same-window "*elpaca-bootstrap*"))
                  ((zerop (apply #'call-process `("git" nil ,buffer t "clone"
                                                  ,@(when-let* ((depth (plist-get order :depth)))
                                                      (list (format "--depth=%d" depth) "--no-single-branch"))
                                                  ,(plist-get order :repo) ,repo))))
                  ((zerop (call-process "git" nil buffer t "checkout"
                                        (or (plist-get order :ref) "--"))))
                  (emacs (concat invocation-directory invocation-name))
                  ((zerop (call-process emacs nil buffer nil "-Q" "-L" "." "--batch"
                                        "--eval" "(byte-recompile-directory \".\" 0 'force)")))
                  ((require 'elpaca))
                  ((elpaca-generate-autoloads "elpaca" repo)))
            (progn (message "%s" (buffer-string)) (kill-buffer buffer))
          (error "%s" (with-current-buffer buffer (buffer-string))))
      ((error) (warn "%s" err) (delete-directory repo 'recursive))))
  (unless (require 'elpaca-autoloads nil t)
    (require 'elpaca)
    (elpaca-generate-autoloads "elpaca" repo)
    (let ((load-source-file-function nil)) (load "./elpaca-autoloads"))))
(add-hook 'after-init-hook #'elpaca-process-queues)
(elpaca `(,@elpaca-order))

(elpaca elpaca-use-package
  ;; Enable use-package :ensure support for Elpaca.
  (elpaca-use-package-mode)
   (setq elpaca-use-package-by-default t))

(elpaca-wait)
#+end_src

** Instal evil-mode
#+begin_src emacs-lisp
  (use-package evil
    :init
    (setq evil-want-integration t)
    (setq evil-want-keybinding nil)
    (setq evil-vsplit-window-right t)
    (setq evil-split-window-below t)
    (evil-mode))
  (use-package evil-collection
    :after evil
    :config
    (setq evil-collection-mode-list '(dashboard dired ibuffer))
    (evil-collection-init)
  )
  (use-package evil-tutor)
  (use-package evil-commentary
    :after evil
    :config
    (evil-commentary-mode)
    )
#+end_src

# ** Vundo
# #+begin_src emacs-lisp
#   (use-package vundo
#     :after evil
#     :config
#     (vundo-mode)
#     (setq evil-undo-system vundo))
# #+end_src

** General keybindings
#+begin_src emacs-lisp
  (use-package general
    :config
    (general-evil-setup)

    ;; set 'SPC' as the global leader key
    (general-create-definer jc/leader-keys
      :states '(normal insert visual emacs)
      :keymaps 'override
      :prefix "SPC" ;; set leader
      :global-prefix "M-SPC" ;; access leader in insert mode with this
      )
    (jc/leader-keys
      ;; buffer related keybindings
      "b" '(:ignore t :wk "Buffer")
      "b b" '(switch-to-buffer :wk "Switch to buffer")
      "b i" '(ibuffer :wk "Ibuffer")
      "b k" '(kill-this-buffer :wk "Kill current buffer")
      "b k" '(kill-this-buffer :wk "Kill current buffer")
      "b n" '(next-buffer :wk "Next buffer")
      "b p" '(previous-buffer :wk "Previous buffer")
      "b r" '(rever-buffer :wk "Rever buffer"))

    (jc/leader-keys
      ;; dired
      "." '(find-file :wk "Find file")
      "p v" '(dired :wk "Dired"))

    (jc/leader-keys
      ;; Windows
      "w" '(:ignore t :wk "Window")
      "w v" '(split-window-horizontally :wk "Split window horizontally")
      "w h" '(split-window-vertically :wk "Split window vertically")
      "w w" '(other-window :wk "Go to next window")
      "w c" '(delete-window :wk "Close current window"))

    (jc/leader-keys
      ;; Help
      "h" '(:ignore t :wk "Help")
      "h f" '(describe-function :wk "Describe function")
      "h v" '(describe-variable :wk "Descrive variable")
      )

    (jc/leader-keys
      "e" '(:ignore t :wk "Evaluate")
      "e b" '(eval-buffer :wk "Evaluate elisp in buffer")
      "e d" '(eval-defun :wk "Evaluate defun containing or after point")
      "e e" '(eval-expression :wk "Evaluate and elisp expression")
      "e l" '(eval-last-sexp :wk "Evaluate elisp expression before point")
      "e r" '(eval-region :wk "Evaluate elisp in region"))
    
    (jc/leader-keys
      "f" '(:ignore t :wk "File")
      "f s" '(save-buffer :wk "Write file")
      "f S" '(sudo-edit :wk "Sudo edit file"))
    )
#+end_src

## Misc
#+begin_src emacs-lisp
  (ido-mode t)
  (electric-pair-mode t)
  (electric-indent-mode -1)
#+end_src


* FONTS
Defining the various fonts that Emacs will use.
** Setting the Font Face
#+begin_src emacs-lisp
  (set-face-attribute 'default nil
    :font "FiraCode Nerd Font"
    :height 110
    :weight 'medium)
  (set-face-attribute 'variable-pitch nil
    :font "Ubuntu"
    :height 120
    :weight 'medium
    )
  (set-face-attribute 'fixed-pitch nil
    :font "JetBrainsMono Nerd Font"
    :height 110
    :weight 'medium
    )

  ;; Comment text and keywords italics
  ;; -> works only on emacsclient
  (set-face-attribute 'font-lock-comment-face nil
    :slant 'italic)
  (set-face-attribute 'font-lock-keyword-face nil
    :slant 'italic)

  ;; Set default fonts for emacsclient
  (add-to-list 'default-frame-alist '(font . "FiraCode Nerd Font-11"))
#+end_src
** Zomming in/out
#+begin_src emacs-lisp
(global-set-key (kbd "C-+") 'text-scale-increase)
(global-set-key (kbd "C-=") 'text-scale-increase)
(global-set-key (kbd "C--") 'text-scale-decrease)
#+end_src

* WHICH-KEY
#+begin_src emacs-lisp
  (use-package which-key
    :init
      (which-key-mode 1)
    :config
    (setq which-key-side-window-location 'bottom
  	  which-key-sort-order #'which-key-key-order-alpha
  	  which-key-sort-uppercase-first nil
  	  which-key-add-column-padding 1
  	  which-key-max-display-columns nil
  	  which-key-min-display-lines 6
  	  which-key-side-window-slot -10
  	  which-key-side-window-max-height 0.25
  	  which-key-idle-delay 0.8
  	  which-key-max-description-length 25
  	  which-key-allow-imprecise-window-fit t
  	  which-key-separator " → " )
    )
#+end_src

* ORG MODE
** Enable table of contents
#+begin_src emacs-lisp
  (use-package toc-org
    :commands toc-org-enable
    :init (add-hook 'org-mode-hook 'toc-org-enable))
#+end_src

** Enable org-indent-mode
#+begin_src emacs-lisp
  (add-hook 'org-mode-hook 'org-indent-mode)
#+end_src

** Enable org bullets
#+begin_src emacs-lisp
  (use-package org-bullets)
  (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
#+end_src

** Enable org-tempo
Useful snippets for org-mode
| Typing the below + TAB | Expands to ...                          |
|------------------------+-----------------------------------------|
| <a                     | '#+BEGIN_EXPORT ascii' … '#+END_EXPORT  |
| <c                     | '#+BEGIN_CENTER' … '#+END_CENTER'       |
| <C                     | '#+BEGIN_COMMENT' … '#+END_COMMENT'     |
| <e                     | '#+BEGIN_EXAMPLE' … '#+END_EXAMPLE'     |
| <E                     | '#+BEGIN_EXPORT' … '#+END_EXPORT'       |
| <h                     | '#+BEGIN_EXPORT html' … '#+END_EXPORT'  |
| <l                     | '#+BEGIN_EXPORT latex' … '#+END_EXPORT' |
| <q                     | '#+BEGIN_QUOTE' … '#+END_QUOTE'         |
| <s                     | '#+BEGIN_SRC' … '#+END_SRC'             |
| <v                     | '#+BEGIN_VERSE' … '#+END_VERSE'         |
#+begin_src emacs-lisp
  (require 'org-tempo)
#+end_src

