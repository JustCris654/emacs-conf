#+TITLE: JustCris Emacs Configuration
#+AUTHOR: Cristian Scapin (JustCris)
#+DESCRIPTION: Personal Emacs config.
#+STARTUP: showeverything
#+OPTIONS: toc:2

* TABLE OF CONTENTS :toc:
- [[#emacs-customizations][EMACS Customizations]]
  - [[#remove-tool-bar-menu-bar-and-scroll-bar][Remove tool-bar, menu-bar and scroll-bar]]
  - [[#enable-line-numbers-and-set-them-relative][Enable line numbers and set them relative]]
  - [[#qol][QoL]]
- [[#packages-important-to-load-first-important-to-load-first][PACKAGES important to load first important to load first]]
  - [[#elpaca-package-manager][Elpaca package manager]]
  - [[#install-evil-mode][Install evil-mode]]
  - [[#general-keybindings][General keybindings]]
- [[#fonts][FONTS]]
  - [[#setting-the-font-face][Setting the Font Face]]
  - [[#zomming-inout][Zomming in/out]]
- [[#which-key][WHICH-KEY]]
- [[#org-mode][ORG MODE]]
  - [[#enable-table-of-contents][Enable table of contents]]
  - [[#enable-org-indent-mode][Enable org-indent-mode]]
  - [[#enable-org-bullets][Enable org bullets]]
  - [[#enable-org-tempo][Enable org-tempo]]
- [[#theme][THEME]]
  - [[#solaire-mode][Solaire mode]]
- [[#highlight][HIGHLIGHT]]
- [[#all-the-icons][ALL THE ICONS]]
- [[#rainbow-mode][RAINBOW MODE]]
- [[#magit][MAGIT]]
- [[#mode-line][MODE LINE]]
- [[#projectile][PROJECTILE]]
- [[#languages][LANGUAGES]]
  - [[#treesitter][Treesitter]]
  - [[#lsp-mode][lsp-mode]]
  - [[#typescript][Typescript]]
  - [[#rust][Rust]]
- [[#completion][COMPLETION]]
  - [[#vertigo][Vertigo]]

* EMACS Customizations
** Remove tool-bar, menu-bar and scroll-bar
#+begin_src emacs-lisp
  (tool-bar-mode -1)
  (menu-bar-mode -1)
  (toggle-scroll-bar -1)
  (pixel-scroll-precision-mode 1)
#+end_src

** Enable line numbers and set them relative
#+begin_src emacs-lisp
  (display-line-numbers-mode 1)
  (global-display-line-numbers-mode 1)
  (setq display-line-numbers-type 'relative)
#+end_src

** QoL
#+begin_src emacs-lisp
  (pixel-scroll-precision-mode 1)
  (defalias 'yes-or-no-p 'y-or-n-p) ;; life is too short
  (setopt use-short-answers t)
  (setq show-trailing-whitespace t)
  (setq indent-tabs-mode nil)
  (setq create-lockfiles nil)
  ;; keep backup and save files in a dedicated directory
  (setq backup-directory-alist
        `((".*" . ,(concat user-emacs-directory "backups")))
        auto-save-file-name-transforms
        `((".*" ,(concat user-emacs-directory "backups") t)))

  (set-charset-priority 'unicode)
  (setq byte-compile-warnings '(not free-vars unresolved noruntime lexical make-local))
  (setq native-comp-async-report-warnings-errors nil)
  (setq load-prefer-newer t)
  (setq treesit-extra-load-path '("~/.config/emacs/tree-sitter/"))
#+end_src


* PACKAGES important to load first important to load first
** Elpaca package manager
#+begin_src emacs-lisp
(defvar elpaca-installer-version 0.11)
(defvar elpaca-directory (expand-file-name "elpaca/" user-emacs-directory))
(defvar elpaca-builds-directory (expand-file-name "builds/" elpaca-directory))
(defvar elpaca-repos-directory (expand-file-name "repos/" elpaca-directory))
(defvar elpaca-order '(elpaca :repo "https://github.com/progfolio/elpaca.git"
                              :ref nil :depth 1 :inherit ignore
                              :files (:defaults "elpaca-test.el" (:exclude "extensions"))
                              :build (:not elpaca--activate-package)))
(let* ((repo  (expand-file-name "elpaca/" elpaca-repos-directory))
       (build (expand-file-name "elpaca/" elpaca-builds-directory))
       (order (cdr elpaca-order))
       (default-directory repo))
  (add-to-list 'load-path (if (file-exists-p build) build repo))
  (unless (file-exists-p repo)
    (make-directory repo t)
    (when (<= emacs-major-version 28) (require 'subr-x))
    (condition-case-unless-debug err
        (if-let* ((buffer (pop-to-buffer-same-window "*elpaca-bootstrap*"))
                  ((zerop (apply #'call-process `("git" nil ,buffer t "clone"
                                                  ,@(when-let* ((depth (plist-get order :depth)))
                                                      (list (format "--depth=%d" depth) "--no-single-branch"))
                                                  ,(plist-get order :repo) ,repo))))
                  ((zerop (call-process "git" nil buffer t "checkout"
                                        (or (plist-get order :ref) "--"))))
                  (emacs (concat invocation-directory invocation-name))
                  ((zerop (call-process emacs nil buffer nil "-Q" "-L" "." "--batch"
                                        "--eval" "(byte-recompile-directory \".\" 0 'force)")))
                  ((require 'elpaca))
                  ((elpaca-generate-autoloads "elpaca" repo)))
            (progn (message "%s" (buffer-string)) (kill-buffer buffer))
          (error "%s" (with-current-buffer buffer (buffer-string))))
      ((error) (warn "%s" err) (delete-directory repo 'recursive))))
  (unless (require 'elpaca-autoloads nil t)
    (require 'elpaca)
    (elpaca-generate-autoloads "elpaca" repo)
    (let ((load-source-file-function nil)) (load "./elpaca-autoloads"))))
(add-hook 'after-init-hook #'elpaca-process-queues)
(elpaca `(,@elpaca-order))

(elpaca elpaca-use-package
  ;; Enable use-package :ensure support for Elpaca.
  (elpaca-use-package-mode)
   (setq elpaca-use-package-by-default t))

(elpaca-wait)
#+end_src

** Install evil-mode
#+begin_src emacs-lisp
  (use-package evil
    :init
    (setq evil-want-integration t)
    (setq evil-want-keybinding nil)
    (setq evil-vsplit-window-right t)
    (setq evil-split-window-below t)
    (evil-mode))
  (use-package evil-collection
    :after evil
    :config
    (setq evil-collection-mode-list '(dashboard dired ibuffer magit))
    (evil-collection-init)
    )
  (use-package evil-tutor)
  (use-package evil-commentary
    :after evil
    :config
    (evil-commentary-mode)
    )
  (use-package evil-surround
    :after evil
    :config
    (global-evil-surround-mode 1)) ;; globally enable evil-surround

  (use-package evil-goggles
    :ensure t
    :config
    (evil-goggles-mode)

    ;; optionally use diff-mode's faces; as a result, deleted text
    ;; will be highlighed with `diff-removed` face which is typically
    ;; some red color (as defined by the color theme)
    ;; other faces such as `diff-added` will be used for other actions
    (evil-goggles-use-diff-faces))
#+end_src

# ** Vundo
# #+begin_src emacs-lisp
#   (use-package vundo
#     :after evil
#     :config
#     (vundo-mode)
#     (setq evil-undo-system vundo))
# #+end_src

** General keybindings
#+begin_src emacs-lisp
  (use-package general
    :demand t
    :config
    (general-evil-setup)
    (general-auto-unbind-keys)

    ;; Definisci leader key
    (general-create-definer jc/leader-keys
      :states '(normal insert visual emacs)
      :keymaps 'override
      :prefix "SPC"
      :global-prefix "M-SPC")

    (jc/leader-keys
      ;; Buffer
      "b" '(:ignore t :wk "Buffer")
      "b b" '(switch-to-buffer :wk "Switch buffer")
      "b i" '(ibuffer :wk "Ibuffer")
      "b k" '(kill-this-buffer :wk "Kill buffer")
      "b n" '(next-buffer :wk "Next buffer")
      "b p" '(previous-buffer :wk "Previous buffer")
      "b r" '(revert-buffer :wk "Revert buffer")

      ;; Dired
      "." '(find-file :wk "Find file")
      "p v" '(dired-jump :wk "Dired jump")

      ;; Project
      "p" '(:ignore t :wk "Project")
      "p p" '(project-prefix-map :wk "Project map")
      
      "g" '(:ignore t :wk "Git")
      "g g" '(magit-status :wk "Status")

      ;; Windows
      "w" '(:ignore t :wk "Window")
      "w v" '(split-window-horizontally :wk "Split horizontally")
      "w h" '(split-window-vertically :wk "Split vertically")
      "w w" '(other-window :wk "Next window")
      "w c" '(delete-window :wk "Close window")

      ;; Help
      "h" '(:ignore t :wk "Help")
      "h f" '(describe-function :wk "Describe function")
      "h v" '(describe-variable :wk "Describe variable")

      ;; Evaluate
      "e" '(:ignore t :wk "Evaluate")
      "e b" '(eval-buffer :wk "Eval buffer")
      "e d" '(eval-defun :wk "Eval defun")
      "e e" '(eval-expression :wk "Eval expression")
      "e l" '(eval-last-sexp :wk "Eval last sexp")
      "e r" '(eval-region :wk "Eval region")

      ;; File
      "f" '(:ignore t :wk "File")
      "f s" '(save-buffer :wk "Save file")
      "f S" '(sudo-edit :wk "Sudo edit file")))
#+end_src

## Misc
#+begin_src emacs-lisp
  (ido-mode t)
  (electric-pair-mode -1)
  (electric-indent-mode -1)
#+end_src


* FONTS
Defining the various fonts that Emacs will use.
** Setting the Font Face
#+begin_src emacs-lisp
  (set-face-attribute 'default nil
    :font "FiraCode Nerd Font"
    :height 110
    :weight 'medium)
  (set-face-attribute 'variable-pitch nil
    :font "Ubuntu"
    :height 120
    :weight 'medium
    )
  (set-face-attribute 'fixed-pitch nil
    :font "JetBrainsMono Nerd Font"
    :height 110
    :weight 'medium
    )

  ;; Comment text and keywords italics
  ;; -> works only on emacsclient
  (set-face-attribute 'font-lock-comment-face nil
    :slant 'italic)
  (set-face-attribute 'font-lock-keyword-face nil
    :slant 'italic)

  ;; Set default fonts for emacsclient
  (add-to-list 'default-frame-alist '(font . "FiraCode Nerd Font-11"))
#+end_src
** Zomming in/out
#+begin_src emacs-lisp
(global-set-key (kbd "C-+") 'text-scale-increase)
(global-set-key (kbd "C-=") 'text-scale-increase)
(global-set-key (kbd "C--") 'text-scale-decrease)
#+end_src

* WHICH-KEY
#+begin_src emacs-lisp
  (use-package which-key
    :init
      (which-key-mode 1)
    :config
    (setq which-key-side-window-location 'bottom
  	  which-key-sort-order #'which-key-key-order-alpha
  	  which-key-sort-uppercase-first nil
  	  which-key-add-column-padding 1
  	  which-key-max-display-columns nil
  	  which-key-min-display-lines 6
  	  which-key-side-window-slot -10
  	  which-key-side-window-max-height 0.25
  	  which-key-idle-delay 0.8
  	  which-key-max-description-length 25
  	  which-key-allow-imprecise-window-fit t
  	  which-key-separator " → " )
    )
#+end_src

* ORG MODE
** Enable table of contents
#+begin_src emacs-lisp
  (use-package toc-org
    :commands toc-org-enable
    :init (add-hook 'org-mode-hook 'toc-org-enable))
#+end_src

** Enable org-indent-mode
#+begin_src emacs-lisp
  (add-hook 'org-mode-hook 'org-indent-mode)
#+end_src

** Enable org bullets
#+begin_src emacs-lisp
  (use-package org-bullets)
  (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
#+end_src

** Enable org-tempo
Useful snippets for org-mode
| Typing the below + TAB | Expands to ...                          |
|------------------------+-----------------------------------------|
| <a                     | '#+BEGIN_EXPORT ascii' … '#+END_EXPORT  |
| <c                     | '#+BEGIN_CENTER' … '#+END_CENTER'       |
| <C                     | '#+BEGIN_COMMENT' … '#+END_COMMENT'     |
| <e                     | '#+BEGIN_EXAMPLE' … '#+END_EXAMPLE'     |
| <E                     | '#+BEGIN_EXPORT' … '#+END_EXPORT'       |
| <h                     | '#+BEGIN_EXPORT html' … '#+END_EXPORT'  |
| <l                     | '#+BEGIN_EXPORT latex' … '#+END_EXPORT' |
| <q                     | '#+BEGIN_QUOTE' … '#+END_QUOTE'         |
| <s                     | '#+BEGIN_SRC' … '#+END_SRC'             |
| <v                     | '#+BEGIN_VERSE' … '#+END_VERSE'         |
#+begin_src emacs-lisp
  (require 'org-tempo)
#+end_src

* THEME
#+begin_src emacs-lisp
  (add-to-list 'custom-theme-load-path "~/.config/emacs/themes/")
  ;; (load-theme 'cobrakai t)

  (use-package kanagawa-themes
  :ensure t
  :config
  (load-theme 'kanagawa-dragon t))
#+end_src
** Solaire mode
#+begin_src emacs-lisp
(use-package solaire-mode
  :demand t
  :config
  (solaire-global-mode +1))
#+end_src
* TODO HIGHLIGHT
#+begin_src emacs-lisp
(use-package hl-todo
  :demand t
  :init
  (global-hl-todo-mode))
#+end_src

* ALL THE ICONS
This is an icon set that can be used with dashboard, dired, ibuffer and other Emacs programs.
  
#+begin_src emacs-lisp
  (use-package all-the-icons
    :ensure t
    :if (display-graphic-p))

  (use-package all-the-icons-dired
    :hook (dired-mode . (lambda () (all-the-icons-dired-mode t))))

  (use-package all-the-icons-completion
  :after (marginalia all-the-icons)
  :demand t
  :hook (marginalia-mode . all-the-icons-completion-marginalia-setup)
  :init (all-the-icons-completion-mode))
#+end_src

* RAINBOW MODE
Display the actual color as a background for any hex color value (ex. #ffffff).  The code block below enables rainbow-mode in all programming modes (prog-mode) as well as org-mode, which is why rainbow works in this document.  

#+begin_src emacs-lisp
(use-package rainbow-mode
  :hook 
  ((org-mode prog-mode) . rainbow-mode))
#+end_src

* MAGIT
#+begin_src emacs-lisp
  (use-package transient
    :ensure t)
  (use-package magit
    :after transient
    :ensure t)
#+end_src

* MODE LINE
#+begin_src emacs-lisp
  (use-package minions
    :demand t
    :config
    (minions-mode 1))
#+end_src

* PROJECTILE
#+begin_src emacs-lisp
  (use-package projectile
  :ensure t
  :init
  (projectile-mode +1)
  :bind (:map projectile-mode-map
              ("s-p" . projectile-command-map)
              ("C-c p" . projectile-command-map)))
#+end_src

* LANGUAGES
** Treesitter
#+begin_src emacs-lisp
  (defun os/setup-install-grammars ()
    "Install Tree-sitter grammars if they are absent."
    (interactive)
    (dolist (grammar
             '((css . ("https://github.com/tree-sitter/tree-sitter-css" "v0.20.0"))
               (bash "https://github.com/tree-sitter/tree-sitter-bash")
               (html . ("https://github.com/tree-sitter/tree-sitter-html" "v0.20.1"))
               (javascript . ("https://github.com/tree-sitter/tree-sitter-javascript" "v0.21.2" "src"))
               (json . ("https://github.com/tree-sitter/tree-sitter-json" "v0.20.2"))
               (python . ("https://github.com/tree-sitter/tree-sitter-python" "v0.20.4"))
               (go "https://github.com/tree-sitter/tree-sitter-go" "v0.20.0")
               (markdown "https://github.com/ikatyang/tree-sitter-markdown")
               (make "https://github.com/alemuller/tree-sitter-make")
               (elisp "https://github.com/Wilfred/tree-sitter-elisp")
               (cmake "https://github.com/uyha/tree-sitter-cmake")
               (c "https://github.com/tree-sitter/tree-sitter-c")
               (cpp "https://github.com/tree-sitter/tree-sitter-cpp")
               (rust"https://github.com/tree-sitter/tree-sitter-rust")
               (toml "https://github.com/tree-sitter/tree-sitter-toml")
               (tsx . ("https://github.com/tree-sitter/tree-sitter-typescript" "v0.20.3" "tsx/src"))
               (typescript . ("https://github.com/tree-sitter/tree-sitter-typescript" "v0.20.3" "typescript/src"))
               (yaml . ("https://github.com/ikatyang/tree-sitter-yaml" "v0.5.0"))
               (prisma "https://github.com/victorhqc/tree-sitter-prisma")))
      (add-to-list 'treesit-language-source-alist grammar)
      ;; Only install `grammar' if we don't already have it
      ;; installed. However, if you want to *update* a grammar then
      ;; this obviously prevents that from happening.
      (unless (treesit-language-available-p (car grammar))
        (treesit-install-language-grammar (car grammar)))))
  (os/setup-install-grammars)
#+end_src
** lsp-mode
#+begin_src emacs-lisp
    (use-package lsp-mode
      :commands (lsp lsp-deferred)
      :init
      (setq lsp-keymap-prefix "C-c l")  ;; Or 'C-l', 's-l'
      :config
      (lsp-enable-which-key-integration t))
    
  ;; (defun jc/lsp-mode-setup ()
  ;;   (setq lsp-headerline-breadcrumb-segments '(path-up-to-project file symbols))
  ;;   (lsp-headerline-breadcrumb-mode))

  ;;   :hook (lsp-mode . jc/lsp-mode-setup)
#+end_src
** Typescript
#+begin_src emacs-lisp
    ;; (use-package typescript-ts-mode
    ;; :ensure nil
    ;; :mode "\\.ts\\'"
    ;; :hook (typescript-ts-mode . lsp-deferred)
    ;; :config
    ;; (setq typescript-ts-mode-indent-offset 2))
    
  ;; (use-package tsx-ts-mode
  ;;   :ensure nil
  ;;   :mode "\\.tsx\\'"
  ;;   :hook (tsx-ts-mode . lsp-deferred))
#+end_src
** Rust
#+begin_src emacs-lisp
  (use-package rust-mode
    :init
    (setq rust-mode-treesitter-derive t)
    :config
    (add-hook 'rust-mode-hook #'lsp)
    )
#+end_src

* COMPLETION
** Vertigo
#+begin_src emacs-lisp
      
    (use-package vertico
    :ensure t
    :bind (:map vertico-map
           ("C-j" . vertico-next)
           ("C-k" . vertico-previous)
           ("C-f" . vertico-exit)
           :map minibuffer-local-map
           ("M-h" . backward-kill-word))
    :custom
    (vertico-cycle t)
    :init
    (vertico-mode))

  ;; (use-package savehist
  ;;   :init
  ;;   (savehist-mode))

  (use-package marginalia
    :after vertico
    :ensure t
    :custom
    (marginalia-annotators '(marginalia-annotators-heavy marginalia-annotators-light nil))
    :init
    (marginalia-mode))

#+end_src
